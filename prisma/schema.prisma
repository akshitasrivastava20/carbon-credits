// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  clerkUserId String?  @unique
  name        String
  industry    String?
  email       String   @unique
  address     String?
  certificateUrl String?
  taxId       String?
  status      String   @default("pending")
  usages      Usage[]
  investments Investment[]
  transactions Transaction[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Usage {
  id        String    @id @default(cuid())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  type      UsageType
  amount    Float     // e.g. kWh, liters, etc.
  createdAt DateTime  @default(now())
}

enum UsageType {
  ELECTRICITY
  DIESEL
  PETROL
  NATURAL_GAS
}

model EmissionFactor {
  id     String    @id @default(cuid())
  type   UsageType @unique
  factor Float     // kg CO₂ per unit
  unit   String    // e.g. "kg CO₂ per kWh"
}

model Project {
  id               String   @id @default(cuid())
  title            String
  description      String
  location         String
  pricePerCredit   Float
  totalCredits     Int
  availableCredits Int
  projectImages    String[] // Array of image URLs
  
  // Enhanced carbon credit project fields
  projectType      String   @default("Other") // e.g., "Reforestation", "Solar Energy", "Wind Energy", etc.
  methodology      String   @default("To be determined") // Carbon methodology used (e.g., "VCS VM0006", "CDM AR-AMS-0007")
  certificationStandard String @default("VCS") // e.g., "VCS", "Gold Standard", "CDM", "CAR"
  projectDeveloper String   @default("Independent Developer") // Organization developing the project
  startDate        DateTime @default(now())
  endDate          DateTime @default("2030-12-31T00:00:00.000Z")
  estimatedCO2Reduction Float @default(0) // Total estimated CO2 reduction in tonnes
  verificationStatus String @default("pending") // "pending", "verified", "issued"
  projectStatus    String   @default("development") // "development", "operational", "completed"
  country          String   @default("Unknown") // Country where project is located
  coordinates      String?  // Optional GPS coordinates
  additionalBenefits String? // Additional environmental/social benefits
  riskFactors      String?  // Project risk assessment
  
  // Project holder/owner information
  holderId         String?  // ID of the project holder (Company or Individual)
  holderType       HolderType @default(INDIVIDUAL) // Type of project holder
  paymentEmail     String?  // Email for payment notifications
  bankAccount      String?  // Bank account details (encrypted)
  payoutSchedule   PayoutSchedule @default(IMMEDIATE) // When payments are released
  platformFee      Float    @default(2.5) // Platform fee percentage (default 2.5%)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  investments      Investment[]
  payouts          Payout[]
  products         Product[] // Dodo products for this project
}

enum HolderType {
  INDIVIDUAL
  COMPANY
  ORGANIZATION
  COOPERATIVE
}

enum PayoutSchedule {
  IMMEDIATE    // Pay immediately after investment
  WEEKLY       // Weekly batch payouts
  MONTHLY      // Monthly batch payouts
  MILESTONE    // Pay on project milestones
}

model Product {
  id               String   @id @default(cuid())
  projectId        String
  dodoProductId    String   @unique // Dodo Payments product ID
  name             String
  description      String?
  price            Float    // Price per credit
  currency         String   @default("USD")
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  project          Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  transactions     Transaction[]
}

model Transaction {
  id               String   @id @default(cuid())
  investmentId     String   @unique
  productId        String
  companyId        String?  // Investor company
  
  // Dodo Payments integration
  dodoSessionId    String?  // Dodo checkout session ID
  dodoPaymentId    String?  // Dodo payment intent ID
  
  // Transaction details
  amount           Float    // Total transaction amount
  platformFee      Float    // Platform fee amount
  payoutAmount     Float    // Amount to be paid to project holder
  creditsPurchased Int      // Number of credits purchased
  pricePerCredit   Float    // Price per credit at time of purchase
  
  // Status tracking
  status           TransactionStatus @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)
  payoutStatus     PayoutStatus @default(PENDING)
  
  // Timestamps
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  paidAt           DateTime?
  
  investment       Investment @relation(fields: [investmentId], references: [id])
  product          Product    @relation(fields: [productId], references: [id])
  company          Company?   @relation(fields: [companyId], references: [id])
  payouts          Payout[]
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  SCHEDULED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Payout {
  id               String   @id @default(cuid())
  projectId        String
  transactionId    String?  // Optional - can be batch payout
  
  // Payout details
  amount           Float    // Amount to be paid out
  currency         String   @default("USD")
  payoutMethod     PayoutMethod @default(BANK_TRANSFER)
  
  // Recipient details
  recipientEmail   String
  recipientName    String?
  bankAccount      String?  // Encrypted bank details
  
  // Status and tracking
  status           PayoutStatus @default(PENDING)
  payoutDate       DateTime?
  scheduledDate    DateTime @default(now())
  
  // External service tracking
  providerPayoutId String?  // External payout service ID
  providerResponse Json?    // Provider response data
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  project          Project     @relation(fields: [projectId], references: [id])
  transaction      Transaction? @relation(fields: [transactionId], references: [id])
}

enum PayoutMethod {
  BANK_TRANSFER
  PAYPAL
  STRIPE_EXPRESS
  WIRE_TRANSFER
  CHECK
}

model Investment {
  id          String   @id @default(cuid())
  companyId   String
  projectId   String
  creditsBought Int
  totalPrice  Float
  createdAt   DateTime @default(now())

  company     Company @relation(fields: [companyId], references: [id])
  project     Project @relation(fields: [projectId], references: [id])
  transaction Transaction?
}




